<?php


namespace App\Payments;


use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Str;
use Openpay;
use Wave\User;

class OpenpayPayment extends PaymentInterface
{
    protected static $view='theme::payments.openpay';
    protected $merchant_id;
    protected $public_key;
    protected $private_key;
    protected $gw;

    public static function instance()
    {
        return new static(
            config('openpay.merchant_id'),
            config('openpay.public_api_key'),
            config('openpay.private_api_key')
        );
    }

    public function __construct($merchant, $public, $private)
    {
        $this->merchant_id = $merchant;
        $this->public_key = $public;
        $this->private_key = $private;
        Openpay::setId($merchant);
        Openpay::setApiKey($private);
        Openpay::setProductionMode(config('openpay.production'));
        debug('Openpay Mode: ' . Openpay::getProductionMode());
        $this->gw = Openpay::getInstance();
    }

    public function charge($card)
    {
        $this->gw->charges->create($card);
    }

    public function singleCharge($request)
    {
        return $this->createTransaction($this->gw->charges->create($request));
    }

    public function createTransaction($data)
    {
        $_data = [
            'payment_gw' => 'openpay',
            'authorization' => $data->authorization,
            'order' => $data->order_id,
            'currency' => 'MXN',
            'amount' => $data->amount,
            'status' => $data->status,
            'transaction_type' => $data->transaction_type,
            'transaction_id' => $data->id,
            'client_ip' => request()->ip(),
            'user_agent' => request()->userAgent(),
            'user_id' => auth()->id(),
            'item_name' => Str::of($data->description)->contains('::') ? Str::of($data->description)->before('::') : $data->description,
            'item_description' => Str::of($data->description)->contains('::') ? Str::of($data->description)->after('::') : $data->description,
            'item_class' => config('payments.openpay'),
            'created_at' => Carbon::parse($data->creation_date)->toDateTimeString(),
        ];
        return parent::createTransaction($_data); // TODO: Change the autogenerated stub
    }

    public function webhook(Request $request)
    {
        // TODO: Implement webhook() method.
    }

    public function cancel(Request $request)
    {
        // TODO: Implement cancel() method.
    }

    public function checkout(Request $request)
    {
        // TODO: Implement checkout() method.
    }

    public function invoices(User $user)
    {
        // TODO: Implement invoices() method.
    }

    public function switchPlans(Request $request)
    {
        // TODO: Implement switchPlans() method.
    }

    public static function getHeadJS()
    {
        $jshead = Str::of(self::$view)->beforeLast('.')->append('._openpay.jshead');
        return view($jshead)->render();
    }
}
