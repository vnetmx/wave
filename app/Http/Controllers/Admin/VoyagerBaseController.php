<?php


namespace App\Http\Controllers\Admin;


use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\Request;
use TCG\Voyager\Facades\Voyager;
use TCG\Voyager\Http\Controllers\VoyagerBaseController as VoyagerBasePackageController;

class VoyagerBaseController extends VoyagerBasePackageController
{

    public function index(Request $request)
    {

        // fullUrlWithQuery
        $routeName = $request->route()->getName();

        if($request->input('txType') == null) {
            return redirect($request->fullUrlWithQuery(['txType' => 'ingreso']));
        }
        debug($routeName);
        if($request->input('month') == null &&
            $request->input('fromDate') == null &&
            $request->input('toDate') == null
          ) {
            return redirect()->route($routeName, [
                'txType' => $request->input('txType', 'ingreso'),
                'month' => date('m'),
                'year' => date('Y')
            ]);
        }
        return parent::index($request); // TODO: Change the autogenerated stub
    }

    /**
     * Overriding
     * Get BREAD relations data.
     *
     * @param Request $request
     *
     * @return mixed
     */
    public function relation(Request $request)
    {
        $slug = $this->getSlug($request);
        $page = $request->input('page');
        $on_page = 50;
        $search = $request->input('search', false);
        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();

        $method = $request->input('method', 'add');

        $model = app($dataType->model_name);
        if ($method != 'add') {
            $model = $model->find($request->input('id'));
        }

        $this->authorize($method, $model);

        $rows = $dataType->{$method.'Rows'};
        /** @var Carbon $filterBy */
        $filterBy = null;
        foreach ($rows as $key => $row) {
            if ($row->field === $request->input('type')) {

                $options = $row->details;
                /**
                 * En esta sección, el valor de $model es el valor del Objeto a editar
                 * que en este caso es Cfdi y del cual vamos a obtener su relación que
                 * es BankTransaction
                 */
                if (
                    isset($options->filterBy) &&
                    isset($options->filterBy->foreign) &&
                    isset($options->filterBy->reference) &&
                    isset($model->{$options->filterBy->foreign}) // Verificamos que el campo definido en foreign se encuentre en el Cfdi
                ) {
                    $filterBy = $model->{$options->filterBy->foreign};
                    debug($filterBy->toDateString());
                }
                // Load Model from Relation "BankTransaction"
                /** @var Model $model */
                $model = app($options->model);

                $skip = $on_page * ($page - 1);

                $additional_attributes = $model->additional_attributes ?? [];

                // Apply local scope if it is defined in the relationship-options
                if (isset($options->scope) && $options->scope != '' && method_exists($model, 'scope'.ucfirst($options->scope))) {
                    $model = $model->{$options->scope}();
                }

                // If search query, use LIKE to filter results depending on field label
                if ($search) {
                    // If we are using additional_attribute as label
                    if (in_array($options->label, $additional_attributes)) {
                        debug("searching");
                        if(isset($filterBy)) {
                            // Vamos a optar ciegamente en que el campo indicado en "reference",
                            // realmente existe en la relación en este caso "BankTransfer"
                            $model = $model->whereMonth($options->filterBy->reference, "=", $filterBy->month);
                        }
                        $relationshipOptions = $model->get();
                        $relationshipOptions = $relationshipOptions->filter(function ($model) use ($search, $options) {
                            //debug($model->{$options->label});
                            return stripos($model->{$options->label}, $search) !== false;
                        });
                        $total_count = $relationshipOptions->count();
                        $relationshipOptions = $relationshipOptions->forPage($page, $on_page);
                    } else {
                        debug('What a fuck? Maybe from server search?');
                        if(isset($filterBy)) {
                            // Vamos a optar ciegamente en que el campo indicado en "reference",
                            // realmente existe en la relación en este caso "BankTransfer"
                            $model = $model->whereMonth($options->filterBy->reference, "=", $filterBy->month);
                        }
                        $total_count = $model->where($options->label, 'LIKE', '%'.$search.'%')->count();
                        $relationshipOptions = $model->take($on_page)->skip($skip)
                            ->where($options->label, 'LIKE', '%'.$search.'%')
                            ->get();
                    }
                } else {
                    $total_count = $model->count();
                    if(isset($filterBy)) {
                        // Vamos a optar ciegamente en que el campo indicado en "reference",
                        // realmente existe en la relación en este caso "BankTransfer"
                        $model = $model->whereMonth($options->filterBy->reference, "=", $filterBy->month);
                    }
                    $relationshipOptions = $model->take($on_page)->skip($skip)->get();
                    debug($relationshipOptions);
                }

                $results = [];

                if (!$row->required && !$search && $page == 1) {
                    $results[] = [
                        'id'   => '',
                        'text' => __('voyager::generic.none'),
                    ];
                }

                // Sort results
                if (!empty($options->sort->field)) {
                    if (!empty($options->sort->direction) && strtolower($options->sort->direction) == 'desc') {
                        $relationshipOptions = $relationshipOptions->sortByDesc($options->sort->field);
                    } else {
                        $relationshipOptions = $relationshipOptions->sortBy($options->sort->field);
                    }
                }

                foreach ($relationshipOptions as $relationshipOption) {
                    $results[] = [
                        'id'   => $relationshipOption->{$options->key},
                        'text' => $relationshipOption->{$options->label},
                    ];
                }

                return response()->json([
                    'results'    => $results,
                    'pagination' => [
                        'more' => ($total_count > ($skip + $on_page)),
                    ],
                ]);
            }
        }

        // No result found, return empty array
        return response()->json([], 404);
    }
}
